name: "Build, Plan and Deploy Stack"
on:
  workflow_dispatch:
  push:
    branches:
      - main

permissions:
  id-token: write # This is required for aws oidc connection
  contents: read # This is required for actions/checkout
  pull-requests: write # This is required for gh bot to comment PR

jobs:
  # Sonar Cloud Scan
  sonar-scan:
    runs-on: ubuntu-latest
    steps:
      - name: Git checkout
        id: checkout
        uses: actions/checkout@v3

      - name: Wait on previous run
        uses: lewagon/wait-on-check-action@v1.3.1
        with:
          ref: ${{ github.ref }}
          running-workflow-name: "Build, Plan and Deploy Stack"
          repo-token: ${{ secrets.GITHUB_TOKEN }}
          wait-interval: 10

      - uses: dorny/paths-filter@v2.11.1
        id: changes
        with:
          working-directory: ${{ github.workspace }}
          filters: |
            src:
              - 'project/**'
              - 'modules/**'
          list-files: 'shell'

      - name: SonarCloud Scan
        if: ${{ steps.changes.outputs.src == 'true' }}
        uses: sonarsource/sonarcloud-github-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_CLOUD_TOKEN }}
        with:
          args: >
              -Dsonar.organization=subhamay-cloudworks
              -Dsonar.projectKey=0001-tarius-py-tf
              -Dsonar.python.coverage.reportPaths=coverage.xml
  ## Plan and Deploy Development
  devl:
    needs: sonar-scan
    uses: subhamay-gh-actions/tfapply/.github/workflows/tf-apply.yaml@v1
    with:
      tfvars_filename: devl.terraform.tfvars
      github_env: devl
      terraform_ver: 1.4
    secrets:
      aws_region: ${{ secrets.AWS_REGION }}
      aws_role_arn: ${{ secrets.AWS_DEVL_ROLE_ARN }}
      aws_tf_state_bucket_name: ${{ secrets.AWS_DEVL_TF_STATE_BUCKET_NAME }}
      aws_tf_state_bucket_key_name: ${{ secrets.AWS_TF_STATE_BUCKET_KEY_NAME }}
  print-devl-output:
    needs: devl
    runs-on: ubuntu-latest
    steps:
      - name: Print deploy output
        run: echo "${{ needs.devl.outputs.result }}"
  ## Plan and Deploy Test/ Stage
  test:
    needs: print-devl-output
    uses: subhamay-gh-actions/tfapply/.github/workflows/tf-apply.yaml@v1
    with:
      tfvars_filename: test.terraform.tfvars
      github_env: test
      terraform_ver: 1.4
    secrets:
      aws_region: ${{ secrets.AWS_REGION }}
      aws_role_arn: ${{ secrets.AWS_TEST_ROLE_ARN }}
      aws_tf_state_bucket_name: ${{ secrets.AWS_TEST_TF_STATE_BUCKET_NAME }}
      aws_tf_state_bucket_key_name: ${{ secrets.AWS_TF_STATE_BUCKET_KEY_NAME }}
  print-test-output:
    needs: test
    runs-on: ubuntu-latest
    steps:
      - name: Print deploy output
        run: echo "${{ needs.test.outputs.result }}"
  ## Plan and Deploy Production
  prod:
    needs: [print-test-output]
    uses: subhamay-gh-actions/tfapply/.github/workflows/tf-apply.yaml@v1
    with:
      tfvars_filename: prod.terraform.tfvars
      github_env: prod
      terraform_ver: 1.4
    secrets:
      aws_region: ${{ secrets.AWS_REGION }}
      aws_role_arn: ${{ secrets.AWS_PROD_ROLE_ARN }}
      aws_tf_state_bucket_name: ${{ secrets.AWS_PROD_TF_STATE_BUCKET_NAME }}
      aws_tf_state_bucket_key_name: ${{ secrets.AWS_TF_STATE_BUCKET_KEY_NAME }}
  print-prod-output:
    needs: prod
    runs-on: ubuntu-latest
    steps:
      - name: Print deploy output
        run: echo "${{ needs.prod.outputs.result }}"

